- name: Install rbenv
  git:
    repo: "{{ rbenv_repo }}"
    dest: "{{ rbenv_root }}"
    accept_hostkey: yes
    force: yes

- name: Create plugins directory
  file: state=directory path={{ rbenv_root }}/plugins

- name: Install plugins
  git:
    repo: "{{ item.repo }}"
    dest: "{{ rbenv_root }}/plugins/{{ item.name }}"
    accept_hostkey: yes
    force: yes
  with_items:
    - "{{ rbenv_plugins }}"

- name: Add rbenv initialization lines to {{ rbenv_profile_path }}
  blockinfile:
    src: rbenv.sh.j2
    dest: "{{ rbenv_profile_path }}"
    owner: "{{ rbenv_profile_owner }}"
    # group: root
    mode: 0644
    create: yes
    marker: "# {mark} ANSIBLE MANAGED BLOCK by kota65535.rbenv"
  become: yes
  become_user: "{{ rbenv_profile_owner }}"
  when: rbenv_profile_owner is defined

- name: Add rbenv initialization lines to {{ rbenv_profile_path }}
  blockinfile:
    src: rbenv.sh.j2
    dest: "{{ rbenv_profile_path }}"
    owner: "{{ ansible_user_id }}"
    # group: root
    mode: 0644
    create: yes
    marker: "# {mark} ANSIBLE MANAGED BLOCK by kota65535.rbenv"
  when: rbenv_profile_owner is not defined

- name: Set default-gems
  copy:
    src=default-gems
    dest={{ rbenv_root }}/default-gems
  when: default_gems_file is not defined
  # ignore_errors: yes

- name: Set custom default-gems
  copy:
    src={{ default_gems_file }}
    dest={{ rbenv_root }}/default-gems
  when: default_gems_file is defined
  # ignore_errors: yes

- name: Set gemrc
  copy: src=gemrc dest=~/.gemrc
  # ignore_errors: yes

- name: Set vars for select users
  copy: src=vars dest={{ rbenv_root }}/vars

# Executed in localhost
- name: Get the latest version for 'X' in version string
  script: get_latest_version.sh {{ rbenv_repo }} {{ rbenv_plugins[0].repo }} {{ item }}
  with_items: "{{ rbenv_ruby_versions }}"
  register: latest_versions
  delegate_to: 127.0.0.1
  changed_when: no
- debug: var=latest_versions
# Make dict 'rbenv_ruby_versions_dict' to associate 'X' version with the actual latest version
- set_fact:
    rbenv_ruby_versions_dict: "{{ rbenv_ruby_versions_dict|default({}) | combine( { item[0]: item[1].stdout } ) }}"
  with_together:
    - "{{ rbenv_ruby_versions }}"
    - "{{ latest_versions.results }}"
- debug: var=rbenv_ruby_versions_dict

- name: Install Ruby interpreters {{ rbenv_ruby_versions_dict.values() }}
  shell: $SHELL -lc "rbenv install {{ item.value }}"
  args:
    creates: "{{ rbenv_root }}/versions/{{ item.value }}/bin/ruby"
  with_dict: "{{ rbenv_ruby_versions_dict }}"
  when: rbenv_ruby_versions is defined

